0371澳门豆捞
SELECT * FROM poiFts5Table WHERE poiFts5Table MATCH 'Patinoire' ORDER BY rank limit 0,10;
SELECT * FROM poiFts5Table WHERE poiFts5Table MATCH '澳门豆捞' ORDER BY rank limit 0,10;

unicode61
CREATE VIRTUAL TABLE t_guides USING fts5(title, content, tokenize=unicode61);
insert into t_guides(title, content) VALUES ('医 学 指 南', '我 是 一 篇 指 南');
insert into t_guides(title, content) VALUES ('骨|科|指|南', '第|二|篇|指|南');
insert into t_guides(title, content) VALUES ('专|科|指|南', '专|二|篇|指|南');

select * from t_guides where t_guides match '医学指南';
无
select * from t_guides where t_guides match '医 学 指';
医 学 指 南|我 是 一 篇 指 南
select * from t_guides where t_guides match '医';
医 学 指 南|我 是 一 篇 指 南
select * from t_guides where t_guides match '指';
医 学 指 南|我 是 一 篇 指 南
骨|科|指|南|第|二|篇|指|南
专|科|指|南|专|二|篇|指|南
select * from t_guides where t_guides match '医 学';
医 学 指 南|我 是 一 篇 指 南
select * from t_guides where t_guides match '科 AND 骨';
骨|科|指|南|第|二|篇|指|南
select * from t_guides where t_guides match '科 NOT 骨';
专|科|指|南|专|二|篇|指|南
select * from t_guides where t_guides match 'NEAR(科 南,6)';
骨|科|指|南|第|二|篇|指|南
专|科|指|南|专|二|篇|指|南
select * from t_guides where t_guides match 'NEAR(科 篇,2)';
无
select * from t_guides where t_guides match 'NEAR(科 南,0)';
无

ICU
CREATE VIRTUAL TABLE poiFTS USING fts4(poiName, adress, tokenize=icu zh_CN);
insert into poiFTS(poiName, adress) VALUES ('申通信息广场', '上海市长宁区淮海西路55号');
insert into poiFTS(poiName, adress) VALUES ('申通控股', '上海市长宁区淮海西路55号申通信息广场28层');
insert into poiFTS(poiName, adress) VALUES ('申通广场-物业管理处', '上海市长宁区淮海西路55号申通信息广场20层');
insert into poiFTS(poiName, adress) VALUES ('用友软件', '上海市长宁区淮海西路55号申通信息广场4层');
insert into poiFTS(poiName, adress) VALUES ('用友软件', '上海市''长宁区淮海西路55号申通信息广场4层');
insert into poiFTS(poiName, adress) VALUES ('上海市社区“九子”运动协会', '上海市''长宁区淮海西路55号申通信息广场4层');

select * from poiFTS WHERE poiFTS MATCH '上海市''';
select * from poiFTS;
select * from poiFTS WHERE poiFTS MATCH '申通信息';
申通信息广场|上海市长宁区淮海西路55号
申通控股|上海市长宁区淮海西路55号申通信息广场28层
申通广场-物业管理处|上海市长宁区淮海西路55号申通信息广场20层
用友软件|上海市长宁区淮海西路55号申通信息广场4层
select * from poiFTS WHERE poiFTS MATCH '信息申通';
申通信息广场|上海市长宁区淮海西路55号
申通控股|上海市长宁区淮海西路55号申通信息广场28层
申通广场-物业管理处|上海市长宁区淮海西路55号申通信息广场20层
用友软件|上海市长宁区淮海西路55号申通信息广场4层
select * from poiFTS WHERE poiFTS MATCH '信息申通' ORDER BY matchinfo(poiFTS) DESC;

insert into poiFTS(poiName, adress) VALUES ('日月光台湾馆', '徐家汇路618号日月光中心广场b2');
insert into poiFTS(poiName, adress) VALUES ('上海日月光集团', '川沙路交叉口西北60米');
insert into poiFTS(poiName, adress) VALUES ('徐汇日月光中心', '漕宝路33号');
insert into poiFTS(poiName, adress) VALUES ('日月光', '上海市静安区');
insert into poiFTS(poiName, adress) VALUES ('日月光中心', '上海市黄浦区徐家汇路618号');
select * from poiFTS WHERE poiFTS MATCH '日月光' ORDER BY matchinfo(poiFTS) DESC;
日月光台湾馆|徐家汇路618号日月光中心广场b2
上海日月光集团|川沙路交叉口西北60米
徐汇日月光中心|漕宝路33号
日月光|上海市静安区
日月光中心|上海市黄浦区徐家汇路618号
select * from poiFTS WHERE poiFTS MATCH '日月' ORDER BY matchinfo(poiFTS) DESC;
无
insert into poiFTS(poiName, adress) VALUES ('日月豪庭', '杨高南路');
select * from poiFTS WHERE poiFTS MATCH '日' ORDER BY matchinfo(poiFTS) DESC;
日月光台湾馆|徐家汇路618号日月光中心广场b2
上海日月光集团|川沙路交叉口西北60米
徐汇日月光中心|漕宝路33号
日月光|上海市静安区
日月光中心|上海市黄浦区徐家汇路618号
日月豪庭|杨高南路

insert into poiFTS(poiName, adress) VALUES ('国权北路/三门路(路口)', '上海市杨浦区');
select * from poiFTS WHERE poiFTS MATCH '三门路国权北路' ORDER BY matchinfo(poiFTS) DESC;
国权北路/三门路(路口)|上海市杨浦区
insert into poiFTS(poiName, adress) VALUES ('guo quan bei lu', '上海市杨浦区');
insert into poiFTS(poiName, adress) VALUES ('guo quan bei lu/san men lu', '上海市杨浦区');
insert into poiFTS(poiName, adress) VALUES ('san men lu', '上海市杨浦区');
select * from poiFTS WHERE poiFTS MATCH 'san' ORDER BY matchinfo(poiFTS) DESC;
guo quan bei lu/san men lu|上海市杨浦区
san men lu|上海市杨浦区
select * from poiFTS WHERE poiFTS MATCH 'san men lu' ORDER BY matchinfo(poiFTS) DESC;
guo quan bei lu/san men lu|上海市杨浦区
san men lu|上海市杨浦区
select * from poiFTS WHERE poiFTS MATCH 'lu' ORDER BY matchinfo(poiFTS) DESC;
guo quan bei lu/san men lu|上海市杨浦区
guo quan bei lu|上海市杨浦区
san men lu|上海市杨浦区

60101 购物中心
150500 地铁站
150400	长途汽车站
150500	地铁站
150600	轻轨站
150700	公交车站相关
150701	旅游专线车站
150702	普通公交站
160000	金融保险机构
160100	银行


std::string str_poi = "CREATE VIRTUAL TABLE if not exists poiFtsTable USING fts4" \
			"(poiId INTEGER NOT NULL, mortonCode INTEGER, poiName TEXT NOT NULL, " \
             "poiSpell TEXT NOT NULL, adressName TEXT, adressSpell TEXT, " \
			 "poiCategoryId INTEGER NOT NULL, starLevel INTEGER NOT NULL, " \
			 "tokenize=icu zh_CN, notindexed='poiId', notindexed='mortonCode', " \
			 "notindexed='poiCategoryId', notindexed='starLevel');";
             
insert into poiFtsTable(poiId, mortonCode, poiName, poiSpell, adressName, adressSpell, poiCategoryId, starLevel) VALUES (1, 1, '日月光中心', 'ri yue guang zhong xin', '上海市杨浦区', 'shang hai yang pu qu', 11, 9);   
insert into poiFtsTable(poiId, mortonCode, poiName, poiSpell, adressName, adressSpell, poiCategoryId, starLevel) VALUES (1, 123456789121212, '日月光', 'ri yue guang', '上海市静安区', 'shang hai jin an qu', 11, 9);           
select * from poiFtsTable WHERE poiFtsTable MATCH '信息申通';
select * from poiFtsTable WHERE poiFtsTable MATCH '日月光'; 
select * from poiFtsTable WHERE poiFtsTable MATCH 'ri yue';  
select * from poiFtsTable WHERE poiFtsTable MATCH 'ri';  
select * from poiFtsTable WHERE poiFtsTable MATCH '杨浦区';  
select * from poiFtsTable WHERE poiFtsTable MATCH 'yue';   
select * from poiFtsTable WHERE poiFtsTable MATCH 'san men lu';     


select * from poiFtsTable WHERE poiFtsTable MATCH '日月光' order by starLevel DESC limit 0, 10;     
//首字母查询
select * from poiFtsTable WHERE poiSpell like 's% t% x% g%' OR adressSpell like '%s% t% x% g%' order by starLevel DESC limit 0, 10;
//全拼查询
SELECT * FROM poiFtsTable WHERE poiFtsTable MATCH 'Shen TongXin' ORDER BY starLevel DESC LIMIT 10 OFFSET 0; 
  
// user function test
CREATE VIRTUAL TABLE documents USING fts4(title, content, starLevel, notindexed='starLevel');

INSERT INTO documents VALUES('hello world', 'This message is a hello world message.', 10);
INSERT INTO documents VALUES('urgent: serious', 'This mail is seen as a more serious mail', 5);

SELECT title FROM documents WHERE documents MATCH 'message';

SELECT docid, hex(matchinfo(documents, 'cs')) FROM documents WHERE documents MATCH '"hello world"' LIMIT 10 OFFSET 0;

SELECT docid, user_rank(matchinfo(documents, 'cs'), 1.0, 1.0, 0.0, starLevel) FROM documents WHERE documents MATCH '"hello world"' LIMIT 10 OFFSET 0;

// user function test
select * from poiFtsTable WHERE poiFtsTable MATCH '信息申通' order by user_rank(matchinfo(poiFtsTable, 'cs'), 0, 0, 0, 3, 3, 1, 1, 0, 0, starLevel) DESC limit 10 offset 0; 

//20170301
static void fts3RankFunc(sqlite3_context *pCtx, int nVal, sqlite3_value **apVal){
  int *aMatchinfo;                /* Return value of matchinfo() */
  int nCol, iCol;                       /* Number of columns in the table */
  double score = 0.0;             /* Value to return */
  int nMaxHitLength = 0;
  double weight = 0.0;

  assert( sizeof(int)==4 );

  /* Check that the number of arguments passed to this function is correct.
  ** If not, jump to wrong_number_args. Set aMatchinfo to point to the array
  ** of unsigned integer values returned by FTS function matchinfo. Set
  ** nPhrase to contain the number of reportable phrases in the users full-text
  ** query, and nCol to the number of columns in the table.
  */
  if( nVal<1 ) goto wrong_number_args;
  aMatchinfo = (unsigned int *)sqlite3_value_blob(apVal[0]);
  nCol = aMatchinfo[0];
  if( nVal!=(1+nCol+1) ) goto wrong_number_args;
  int starLevel = sqlite3_value_int(apVal[1+nCol]);

  /* Iterate through each phrase in the users query. */
  for(iCol=0; iCol<nCol; iCol++){
    /* Now iterate through each column in the users query. For each column,
    ** increment the relevancy score by:
    **
    **   <hit length> * <column weight> + <star level>
    **
    */
    nMaxHitLength = aMatchinfo[1 + iCol];
    weight = sqlite3_value_double(apVal[iCol+1]);
    if( nMaxHitLength>0 ){
      score += (double)nMaxHitLength * weight;
    }
  }
  score += starLevel;

  sqlite3_result_double(pCtx, score);
  return;

  /* Jump here if the wrong number of arguments are passed to this function */
wrong_number_args:
  sqlite3_result_error(pCtx, "wrong number of arguments to function rank()", -1);
}
//20170302
SELECT docid, hex(matchinfo(documents, 'cls')) FROM documents WHERE documents MATCH 'hello world' LIMIT 10 OFFSET 0;  
SELECT docid, user_rank(matchinfo(documents, 'cls'), 1.0, 1.0, 0.0, starLevel) FROM documents WHERE documents MATCH '"hello world"' LIMIT 10 OFFSET 0;
select * from poiFtsTable WHERE poiFtsTable MATCH '信息申通' order by user_rank(matchinfo(poiFtsTable, 'cls'), 0, 0, 0, 15, 15, 7, 7, 0, 7, 0, starLevel) DESC limit 10 offset 0;
static void fts3RankFunc(sqlite3_context *pCtx, int nVal, sqlite3_value **apVal){
  int *aMatchinfo;                /* Return value of matchinfo() */
  int nCol, iCol;                       /* Number of columns in the table */
  double score = 0.0;             /* Value to return */
  int nMaxHitLength, nValueLength;
  double weight = 0.0;

  assert( sizeof(int)==4 );

  /* Check that the number of arguments passed to this function is correct.
  ** If not, jump to wrong_number_args. Set aMatchinfo to point to the array
  ** of unsigned integer values returned by FTS function matchinfo. Set
  ** nPhrase to contain the number of reportable phrases in the users full-text
  ** query, and nCol to the number of columns in the table.
  */
  if( nVal<1 ) goto wrong_number_args;
  aMatchinfo = (unsigned int *)sqlite3_value_blob(apVal[0]);
  nCol = aMatchinfo[0];
  if( nVal!=(1+nCol+1) ) goto wrong_number_args;
  int starLevel = sqlite3_value_int(apVal[1+nCol]);

  /* Iterate through each phrase in the users query. */
  for(iCol=0; iCol<nCol; iCol++){
    /* Now iterate through each column in the users query. For each column,
    ** increment the relevancy score by:
    **
    **   <hit length> * <column weight> + <star level>
    **
    */
    nValueLength = aMatchinfo[1 + iCol];
    nMaxHitLength = aMatchinfo[1 + nCol + iCol];
    weight = sqlite3_value_double(apVal[iCol+1]);
    if( nMaxHitLength>0 ){
      if (nMaxHitLength != nValueLength)
        score += (double)nMaxHitLength * weight;
      else
        score += (double)nMaxHitLength * weight * 2;
    }
  }
  score += starLevel;

  sqlite3_result_double(pCtx, score);
  return;

  /* Jump here if the wrong number of arguments are passed to this function */
wrong_number_args:
  sqlite3_result_error(pCtx, "wrong number of arguments to function rank()", -1);
}


select hex(matchinfo(poiFtsTable, 's')), * from poiFtsTable WHERE poiFtsTable MATCH 's* t* x* g*' order by user_rank(matchinfo(poiFtsTable, 'cls'), 0, 0, 0, 15, 15, 7, 7, 0, 7, 0, starLevel) DESC limit 10 offset 0;

select * from poiFtsTable WHERE poiFtsTable MATCH '信息申通' order by user_rank(matchinfo(poiFtsTable, 'cls'), 0, 0, 0, 0, 15, 7, 0, 7, 0, starLevel) DESC limit 10 offset 0;
